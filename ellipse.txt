#include <iostream>
#include <math.h>
#include <conio.h>
#include <graphics.h>
using namespace std;

void EllipseMidPoint() {
    int xc, yc, a, b;
    cout << "Enter The Center of The Ellipse ( Xc , Yc ): ";
    cin >> xc >> yc;
    cout << "Enter The Horizontal Radius ( a ) and Vertical Radius ( b ): ";
    cin >> a >> b;

    int x = 0;
    int y = b;

    // Region 1
    int dx = 2 * pow(b, 2) * x;
    int dy = 2 * pow(a, 2) * y;
    int pk1 = pow(b, 2) - pow(a, 2) * b + 0.25 * pow(a, 2);

    int gd = DETECT, gm;
    initgraph(&gd, &gm, NULL);
    cout << "Pk\tX\tY\tDX\tDY\n";

    while (dx < dy) {
        // Plot the 4 symmetric points
        putpixel(xc + x, yc + y, WHITE);
        putpixel(-x + xc, yc + y, WHITE);
        putpixel(-x + xc, yc - y, WHITE);
        putpixel(xc + x, yc - y, WHITE);

        if (pk1 < 0) {
            x++;
            dx = 2 * pow(b, 2) * x;
            dy = 2 * pow(a, 2) * y;
            cout << pk1 << "\t" << x << "\t" << y << "\t" << dx << "\t" << dy << "\n";
            pk1 += dx + pow(b, 2);
        } else {
            x++;
            y--;
            dx = 2 * pow(b, 2) * x;
            dy = 2 * pow(a, 2) * y;
            cout << pk1 << "\t" << x << "\t" << y << "\t" << dx << "\t" << dy << "\n";
            pk1 += dx - dy + pow(b, 2);
        }
    }

    // Region 2
    int pk2 = pow(b, 2) * pow(x + 0.5, 2) + pow(a, 2) * pow(y - 1, 2) - pow(b, 2) * pow(a, 2);

    while (y != 0) {
        if (pk2 > 0) {
            y--;
            dx = 2 * pow(b, 2) * x;
            dy = 2 * pow(a, 2) * y;
            cout << pk2 << "\t" << x << "\t" << y << "\t" << dx << "\t" << dy << "\n";
            pk2 += pow(a, 2) * (3 - 2 * y);
        } else {
            x++;
            y--;
            dx = 2 * pow(b, 2) * x;
            dy = 2 * pow(a, 2) * y;
            cout << pk2 << "\t" << x << "\t" << y << "\t" << dx << "\t" << dy << "\n";
            pk2 += pow(a, 2) * (3 - 2 * y) + (2 * pow(b, 2) * (x + 1));
        }

        // Plot the 4 symmetric points
        putpixel(xc + x, yc + y, WHITE);
        putpixel(-x + xc, yc + y, WHITE);
        putpixel(-x + xc, yc - y, WHITE);
        putpixel(xc + x, yc - y, WHITE);
    }

    getch();
    closegraph();
}

int main() {
    EllipseMidPoint();
    return 0;
}
